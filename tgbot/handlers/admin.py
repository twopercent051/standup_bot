import os

from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext

from tgbot.keyboards.inline import *
from tgbot.config import load_config
from tgbot.models.db_connector import *
from tgbot.misc.states import FSMEvent
from create_bot import bot

config = load_config(".env")
admin_group = config.misc.admin_group

async def admin_start_msg(message: Message):
    text = [
        '–≠—Ç–æ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –¢—É—Ç –º–æ–∂–Ω–æ –∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        '–∏ –Ω–∞–≤–µ—Ä–Ω–æ–µ –º–Ω–æ–≥–æ —á–µ–≥–æ –µ—â—ë. –≠—Ç–æ –ø–µ—Ä–≤–æ–µ, —á—Ç–æ —è –Ω–∞–ø–∏—Å–∞–ª, –∫–æ–≥–¥–∞ —Å–æ–∑–∞–≤–∞–ª –±–æ—Ç–∞, –ø–æ—ç—Ç–æ–º—É –Ω–µ –∑–Ω–∞—é —á—Ç–æ –ø–æ–ª—É—á–∏—Ç—Å—è.',
        '–ù–∞—Ç–µ –≤–∞–º —Å–º–∞–π–ª–∏–∫ ‚úåÔ∏è'
    ]
    keyboard = admin_mainmenu_kb()
    await FSMEvent.home.set()
    await message.answer(' '.join(text), reply_markup=keyboard)


async def admin_start_clb(callback: CallbackQuery):
    text = [
        '–≠—Ç–æ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –¢—É—Ç –º–æ–∂–Ω–æ –∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        '–∏ –Ω–∞–≤–µ—Ä–Ω–æ–µ –º–Ω–æ–≥–æ —á–µ–≥–æ –µ—â—ë. –≠—Ç–æ –ø–µ—Ä–≤–æ–µ, —á—Ç–æ —è –Ω–∞–ø–∏—Å–∞–ª, –∫–æ–≥–¥–∞ —Å–æ–∑–∞–≤–∞–ª –±–æ—Ç–∞, –ø–æ—ç—Ç–æ–º—É –Ω–µ –∑–Ω–∞—é —á—Ç–æ –ø–æ–ª—É—á–∏—Ç—Å—è.',
        '–ù–∞—Ç–µ –≤–∞–º —Å–º–∞–π–ª–∏–∫ ‚úåÔ∏è'
    ]
    keyboard = admin_mainmenu_kb()
    await FSMEvent.home.set()
    await callback.message.answer(' '.join(text), reply_markup=keyboard)


async def admin_event_menu(callback: CallbackQuery):
    text = '–î–µ–π—Å—Ç–≤—É–π!'
    keyboard = admin_event_menu_kb()
    await callback.message.answer(text, reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)


async def create_event(callback: CallbackQuery):
    text = [
        '–í —ç—Ç–æ–º –º–µ–Ω—é –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–≤–µ—Å—Ç–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Å—Ç—É–ø–∞—é—â–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –í—Å–µ –ø–æ–ª—è, –∫–∞–∫ –≤—ã –∏—Ö –∑–∞–ø–æ–ª–Ω–∏—Ç–µ',
        '–ø–æ–ø–∞–¥—É—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π —É–≤–∏–¥—è—Ç –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏. –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ',
        '\n',
        '<b>–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!</b>'
    ]
    keyboard = home_kb()
    await FSMEvent.title.set()
    await callback.message.answer(' '.join(text), reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)


async def create_event_title(message: Message, state: FSMContext):
    text = '–ó–î–û–†–û–í–û! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
    keyboard = home_kb()
    title = message.text
    async with state.proxy() as data:
        data['title'] = title
    await FSMEvent.date.set()
    await message.answer(text, reply_markup=keyboard)


async def create_event_date(message: Message, state: FSMContext):
    text = '–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'
    keyboard = home_kb()
    date = message.text
    async with state.proxy() as data:
        data['date'] = date
    await FSMEvent.time.set()
    await message.answer(text, reply_markup=keyboard)


async def create_event_time(message: Message, state: FSMContext):
    text = '–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ, –≥–¥–µ –æ–Ω–æ –ø—Ä–æ–π–¥—ë—Ç'
    keyboard = home_kb()
    time = message.text
    async with state.proxy() as data:
        data['time'] = time
    await FSMEvent.location.set()
    await message.answer(text, reply_markup=keyboard)


async def create_event_location(message: Message, state: FSMContext):
    text = '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—Ñ–∏—à—É.'
    keyboard = home_kb()
    location = message.text
    async with state.proxy() as data:
        data['location'] = location
    await FSMEvent.picture.set()
    await message.answer(text, reply_markup=keyboard)


async def create_event_picture(message: Message, state: FSMContext):
    text = '–°–¥–µ–ª–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.'
    keyboard = home_kb()
    photo_id = message.photo[-1].file_id
    async with state.proxy() as data:
        data['photo_id'] = photo_id
    await FSMEvent.description.set()
    await message.answer(text, reply_markup=keyboard)

async def edit_desc(callback: CallbackQuery):
    text = '–°–¥–µ–ª–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.'
    keyboard = home_kb()
    await FSMEvent.description.set()
    await callback.message.answer(text, reply_markup=keyboard)

async def create_event_description(message: Message, state: FSMContext):
    async with state.proxy() as data:
        title = data.as_dict()['title']
        date = data.as_dict()['date']
        time = data.as_dict()['time']
        location = data.as_dict()['location']
        photo_id = data.as_dict()['photo_id']
    description = message.text
    text = [
        '–í–æ—Ç —Ç–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å:',
        f'<b>{title}</b>',
        '',
        description,
        '',
        f'‚è∞ –í—Å—Ç—Ä–µ—á–∞–µ–º—Å—è {date} –≤ {time}',
        f'üìå –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: {location}',
        '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ'
    ]
    async with state.proxy() as data:
        data['description'] = description
    await FSMEvent.description.set()
    try:
        keyboard = public_event_kb()
        await bot.send_photo(chat_id=admin_group, photo=photo_id, caption='\n'.join(text), reply_markup=keyboard)
    except:
        err_msg = "\n".join(text)
        text = f'–¢–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª–∏–Ω—É –Ω–∞ {len(err_msg) - 964} —Å–∏–º–≤–æ–ª–æ–≤'
        keyboard = too_long_desc_kb()
        await message.answer(text, reply_markup=keyboard)

async def public_event(callback: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        title = data.as_dict()['title']
    text = f'–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ <b>{title}</b> –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!'
    keyboard = home_kb()
    await create_event_sql(state)
    await callback.message.answer(text, reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)

async def incorrect_message(message: Message):
    text = '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    keyboard = home_kb()
    await message.answer(text, reply_markup=keyboard)


async def show_tables(callback: CallbackQuery):
    text = ['<b>–°–µ–π—á–∞—Å —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–æ–≤ —Ç–∞–∫–æ–π:</b>', '']
    tables = await get_tables()
    for table in tables:
        text.append(table['table_name'])
    keyboard = edit_tables_kb()
    await callback.message.answer('\n'.join(text), reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)

async def new_tables(callback: CallbackQuery):
    text = [
        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Å—Ç–æ–ª—ã —Å–ø–∏—Å–∫–æ–º —á–µ—Ä–µ–∑ ENTER',
        '‚ö†Ô∏è–í–ù–ò–ú–ê–ù–ò–ï! –ë—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω –≤–µ—Å—å —Å–ø–∏—Å–æ–∫, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
    ]
    keyboard = home_kb()
    await FSMEvent.tables.set()
    await callback.message.answer('\n'.join(text), reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)


async def edit_tables_finish(message: Message):
    text = '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'
    keyboard = home_kb()
    new_tables = message.text.split('\n')
    await delete_tables_sql()
    for table in new_tables:
        await create_table_sql(table)
    await message.answer(text, reply_markup=keyboard)



def register_admin(dp: Dispatcher):
    error_states = [FSMEvent.title, FSMEvent.date, FSMEvent.time, FSMEvent.location, FSMEvent.description]
    dp.register_message_handler(admin_start_msg, commands=["start"], state="*", chat_id=admin_group)
    dp.register_message_handler(create_event_title, state=FSMEvent.title, content_types='text', chat_id=admin_group)
    dp.register_message_handler(create_event_date, state=FSMEvent.date, content_types='text', chat_id=admin_group)
    dp.register_message_handler(create_event_time, state=FSMEvent.time, content_types='text', chat_id=admin_group)
    dp.register_message_handler(create_event_location, state=FSMEvent.location, content_types='text',
                                chat_id=admin_group)
    dp.register_message_handler(create_event_picture, state=FSMEvent.picture, content_types='photo',
                                chat_id=admin_group)
    dp.register_message_handler(incorrect_message, state=FSMEvent.picture, content_types=['text', 'video', 'sticker'],
                                chat_id=admin_group)
    dp.register_message_handler(create_event_description, state=FSMEvent.description, content_types='text',
                                chat_id=admin_group)
    dp.register_message_handler(incorrect_message, state=error_states, content_types=['photo', 'video', 'sticker'],
                                chat_id=admin_group)
    dp.register_message_handler(edit_tables_finish, state=FSMEvent.tables, content_types='text', chat_id=admin_group)


    dp.register_callback_query_handler(admin_start_clb, lambda x: x.data == 'home', state='*', chat_id=admin_group)
    dp.register_callback_query_handler(admin_event_menu, lambda x: x.data == 'events', state='*', chat_id=admin_group)
    dp.register_callback_query_handler(create_event, lambda x: x.data == 'create_event', state='*', chat_id=admin_group)
    dp.register_callback_query_handler(public_event, lambda x: x.data == 'public', state=FSMEvent.description,
                                       chat_id=admin_group)
    dp.register_callback_query_handler(edit_desc, lambda x: x.data == 'edit_desc', state=FSMEvent.description,
                                       chat_id=admin_group)
    dp.register_callback_query_handler(show_tables, lambda x: x.data == 'tables', state='*', chat_id=admin_group)
    dp.register_callback_query_handler(new_tables, lambda x: x.data == 'edit_tables', state='*', chat_id=admin_group)

